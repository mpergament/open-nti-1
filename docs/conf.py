# -*- coding: utf-8 -*-
#
# OpenNTI documentation build configuration file, created by
# sphinx-quickstart on Wed Aug  3 23:37:38 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import yaml
import pprint
from jinja2 import Template
# sys.path.insert(0, os.path.abspath('.'))


pp = pprint.PrettyPrinter(indent=4)

# -----------------Find all Parser ---------------------------------

parser_dir = "../data/junos_parsers"
graph_dir = "../dashboards/templates/graphs"
templating_dir = "../dashboards/templates/templatings"
annotation_dir = "../dashboards/templates/annotations"
row_dir = "../dashboards/templates/rows"
template_dir = "_templates"

parsers = { 'parsers': [] }

############################################
## Collect Parsers
############################################

for file in os.listdir(parser_dir):
    if file.endswith(".yaml"):
        parsers['parsers'].append(file)

table_parser_file = open(template_dir + "/table-html-parser.j2")
table_parser_tpl = Template(table_parser_file.read())
parser_table_html = table_parser_tpl.render( parsers )

tpl_var = {}
tpl_var['table'] = parser_table_html

# -- Generate RST files based on Jinja file

parser_file = open(template_dir + "/datacollectionagent.rst.j2")
parser_tpl = Template(parser_file.read())
parser_rst = parser_tpl.render( tpl_var )

with open("datacollectionagent.rst", "w") as text_file:
    text_file.write(parser_rst)

############################################
## Collect Dashboard / Graph
############################################

graph_var = { 'graphs': [] }

for file in os.listdir(graph_dir):
    if file.endswith(".yaml"):

        # Read content of the file to extract info
        graph = yaml.load(open(graph_dir + "/" + file).read())
        if 'title' in graph.keys():

            tmp = {  'title': graph['title'], 'file': file }
            graph_var['graphs'].append(tmp)

            # print graph['title'] + " - " + file

table_graph_file = open(template_dir + "/table-html-graph.j2")
table_graph_tpl = Template(table_graph_file.read())
graph_table_html = table_graph_tpl.render( graph_var )

############################################
## Collect Dashboard / rows
############################################

row_var = { 'rows': [] }
print " ---- Rows --------"

for file in os.listdir(row_dir):
    if file.endswith(".yaml"):

        # Read content of the file to extract info
        row = yaml.load(open(row_dir + "/" + file).read())
        if 'title' in row.keys():

            tmp = {  'title': row['title'], 'file': file }
            row_var['rows'].append(tmp)

            print row['title'] + " - " + file

table_row_file = open(template_dir + "/table-html-row.j2")
table_row_tpl = Template(table_row_file.read())
row_table_html = table_row_tpl.render( row_var )

############################################
## Collect Dashboard / Annotations
############################################

annotation_var = { 'annotations': [] }
print " ---- Annotations --------"

for file in os.listdir(annotation_dir):
    if file.endswith(".yaml"):

        # Read content of the file to extract info
        annotation = yaml.load(open(annotation_dir + "/" + file).read())
        if 'name' in annotation.keys():

            tmp = {  'title': annotation['name'], 'file': file }
            annotation_var['annotations'].append(tmp)

            print annotation['name'] + " - " + file

table_annotation_file = open(template_dir + "/table-html-annotation.j2")
table_annotation_tpl = Template(table_annotation_file.read())
annotation_table_html = table_annotation_tpl.render( annotation_var )

############################################
## Collect Dashboard / Templatings
############################################

templating_var = { 'templatings': [] }
print " ---- Templatings --------"

for file in os.listdir(templating_dir):
    if file.endswith(".yaml"):

        # Read content of the file to extract info
        templating = yaml.load(open(templating_dir + "/" + file).read())
        if 'name' in templating.keys():

            tmp = {  'title': templating['name'], 'file': file }
            templating_var['templatings'].append(tmp)

            print templating['name'] + " - " + file

table_templating_file = open(template_dir + "/table-html-templating.j2")
table_templating_tpl = Template(table_templating_file.read())
templating_table_html = table_templating_tpl.render( templating_var )

# -- Generate RST files based on Jinja file

tpl_var = {}
tpl_var['graphs'] = graph_table_html
tpl_var['rows'] = row_table_html
tpl_var['annotations'] = annotation_table_html
tpl_var['templatings'] = templating_table_html

dashboardlib_file = open(template_dir + "/dashboardlib.rst.j2")
dashboardlib_tpl = Template(dashboardlib_file.read())
dashboardlib_rst = dashboardlib_tpl.render( tpl_var )

with open("dashboardlib.rst", "w") as text_file:
    text_file.write(dashboardlib_rst)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
# extensions = [
#     'sphinx.ext.doctest',
#     'sphinx.ext.todo',
#     'sphinx.ext.ifconfig',
# ]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
#
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'OpenNTI'
copyright = u'2016, Damien Garros, Efrain Gonzalez, Michael Pergament, Pablo Sagrera Garcia'
author = u'Damien Garros, Efrain Gonzalez, Michael Pergament, Pablo Sagrera Garcia'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'0.0.1'
# The full version, including alpha/beta/rc tags.
release = u'0.0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#
# today = ''
#
# Else, today_fmt is used as the format for a strftime call.
#
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------
import sphinx_rtd_theme

html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ["_themes", ]

# The name for this set of Sphinx documents.
# "<project> v<release> documentation" by default.
#
# html_title = u'OpenNTI v1.0'

# A shorter title for the navigation bar.  Default is the same as html_title.
#
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#
# html_logo = None

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#
# html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#
# html_extra_path = []

# If not None, a 'Last updated on:' timestamp is inserted at every page
# bottom, using the given strftime format.
# The empty string is equivalent to '%b %d, %Y'.
#
# html_last_updated_fmt = None

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#
# html_additional_pages = {}

# If false, no module index is generated.
#
# html_domain_indices = True

# If false, no index is generated.
#
# html_use_index = True

# If true, the index is split into individual pages for each letter.
#
# html_split_index = False

# If true, links to the reST sources are added to the pages.
#
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr', 'zh'
#
# html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# 'ja' uses this config value.
# 'zh' user can custom change `jieba` dictionary path.
#
# html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#
# html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'OpenNTIdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
     # The paper size ('letterpaper' or 'a4paper').
     #
     # 'papersize': 'letterpaper',

     # The font size ('10pt', '11pt' or '12pt').
     #
     # 'pointsize': '10pt',

     # Additional stuff for the LaTeX preamble.
     #
     # 'preamble': '',

     # Latex figure (float) alignment
     #
     # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'OpenNTI.tex', u'OpenNTI Documentation',
     u'Damien Garros, Efrain Gonzalez, Michael Pergament, Pablo Sagrera Garcia', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#
# latex_use_parts = False

# If true, show page references after internal links.
#
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
#
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
#
# latex_appendices = []

# It false, will not define \strong, \code, 	itleref, \crossref ... but only
# \sphinxstrong, ..., \sphinxtitleref, ... To help avoid clash with user added
# packages.
#
# latex_keep_old_macro_names = True

# If false, no module index is generated.
#
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'opennti', u'OpenNTI Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'OpenNTI', u'OpenNTI Documentation',
     author, 'OpenNTI', 'One line description of project.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#
# texinfo_appendices = []

# If false, no module index is generated.
#
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#
# texinfo_no_detailmenu = False
